{
    "rules": [
        {
            "command": format(
                "mkdir -p outputs/%s && python %s raw_points/%s.csv outputs/%s/%s.csv",
                t, PROCESS_POINTS, t, t, t
            ),
            "outputs": [
                format("outputs/%s/%s.csv", t, t),
                format("outputs/%s", t),
            ],
            "inputs": [
                format("raw_points/%s.csv", t),
                PROCESS_POINTS
            ],
        } for t in taxa, {
            "command": format(
                "mkdir -p outputs/%s/model && %s -cp %s density.MaxEnt -s outputs/%s/%s.csv -e %s -o outputs/%s/model nowarnings nocache autorun -z",
                t, JAVA, MAXENT, t, t, model, t
            ),
            "inputs": [
                MAXENT,
                JAVA,
                model,
                format("outputs/%s/%s.csv", t, t)
            ],
            "outputs": [
                format("outputs/%s/model", t),
                format("outputs/%s/model/%s.lambdas", t, t),
            ],
        } for t in taxa, {
            "command": format(
                "mkdir -p outputs/%s/proj_%s && %s -cp %s density.Project outputs/%s/model/%s.lambdas %s outputs/%s/proj_%s/%s_%s.asc nowarnings nocache autorun -z",
                t, basename(p), JAVA, MAXENT, t, t, p, t, basename(p), t, basename(p)
            ),
            "outputs": [
                format("outputs/%s/proj_%s", t, basename(p)),
                format(
                    "outputs/%s/proj_%s/%s_%s.asc",
                    t, basename(p), t, basename(p)
                )
            ],
            "inputs": [
                MAXENT,
                JAVA,
                model,
                p,
                format("outputs/%s/model/%s.lambdas", t, t),
            ]
        } for t in taxa for p in projections,
    ],
}
